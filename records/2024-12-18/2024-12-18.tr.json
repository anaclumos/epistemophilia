[
  {
    "id": 42445037,
    "title": "FTC, otel ve etkinlik bilet fiyatlarındaki gizli hurda ücretlerini yasakladı",
    "originLink": "https://www.cnbc.com/2024/12/17/ftc-bans-hidden-junk-fees-in-hotel-event-ticket-prices-.html",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=42445037",
    "commentBody": "",
    "originSummary": [
      "FTC, otel ve etkinlik bilet fiyatlarındaki gizli ücretleri yasaklayan bir kural uygulamaya koydu ve satıcıların toplam maliyetleri önceden açıklamalarını zorunlu kıldı.",
      "Bu girişim, Başkan Biden'ın tüketici maliyetlerini gereksiz yere artıran gereksiz ücretleri ortadan kaldırma çabasının bir parçasıdır.",
      "Kural, hizmet ve tatil köyü ücretlerinin ilan edilen fiyatlara dahil edilmesini zorunlu kılarak, tüketicilere önemli ölçüde zaman tasarrufu sağlayabilir, ancak gelecekteki yönetimlerden ve Kongre'den gelen zorluklarla karşılaşabilir."
    ],
    "commentSummary": [
      "Federal Ticaret Komisyonu (FTC), otel ve etkinlik bileti fiyatlandırmasında gizli hurda ücretlerini yasakladı ve tüm ücretlerin tüketicilere önceden açıklanmasını zorunlu kıldı. Bu düzenleme, fiyat şeffaflığını artırmayı ve tüccarlar tarafından yanıltıcı uygulamalardan tüketicileri korumayı amaçlamaktadır. Karar, adil rekabeti teşvik etmek ve gizli maliyetler yoluyla tüketici istismarını önlemek için düzenlemelere duyulan ihtiyaç hakkında tartışmaları başlattı."
    ],
    "points": 490,
    "commentCount": 480,
    "retryCount": 0,
    "time": 1734467767
  },
  {
    "id": 42447071,
    "title": "Ergo Chat – Go dilinde yazılmış modern bir IRC sunucusu",
    "originLink": "https://github.com/ergochat/ergo",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=42447071",
    "commentBody": "",
    "originSummary": [
      "Ergo, daha önce Oragono olarak bilinen, Go programlama dilinde geliştirilmiş modern bir İnternet Aktarım Sohbeti (IRC) sunucusudur ve kurulumu ve kullanımı kolaydır.",
      "IRC daemon (ircd), hizmetler çerçevesi ve bouncer özelliklerini entegre eder, IRCv3 desteği ile birlikte gelir ve bir YAML yapılandırma dosyası aracılığıyla özelleştirilebilir.",
      "Ergo, Ergonomadic IRC daemon'un bir çatalıdır ve Jeremy Latt, Edmund Huber, Daniel Oaks ve Shivaram Lingamneni gibi geliştiricilerin katkılarını içerir."
    ],
    "commentSummary": [
      "Ergo Chat, Go dilinde geliştirilmiş modern bir IRC (Internet Relay Chat) sunucusudur. Barındırma kolaylığı, minimal kaynak kullanımı ve v3 sohbet geçmişi ile her zaman açık çoklu istemci desteği gibi gelişmiş özellikleriyle bilinir.",
      "Yerleşik websocket desteği içerir, kolay web istemcisi erişimini kolaylaştırır ve kullanıcıların IRC olarak tanımayabileceği modern bir sohbet deneyimi sunar.",
      "Tartışmalar, IRC'nin Discord gibi platformlara kıyasla açık protokolünü ve esnekliğini vurguluyor ve bazıları tarafından geçici sohbetleri sürdürmek için bir özellik olarak görülen IRC'nin kalıcı sohbet geçmişi eksikliği üzerindeki tartışmayı ele alıyor."
    ],
    "points": 248,
    "commentCount": 113,
    "retryCount": 0,
    "time": 1734482779
  },
  {
    "id": 42448939,
    "title": "Alp Dağları'nın kuzeyinde Hristiyanlığın en eski kanıtı gümüş muska",
    "originLink": "https://archaeologymag.com/2024/12/oldest-evidence-of-christianity-north-of-the-alps/",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=42448939",
    "commentBody": "",
    "originSummary": [],
    "commentSummary": [
      "Frankfurt'ta keşfedilen bir gümüş muska, Alpler'in kuzeyindeki Hristiyanlığın en eski kanıtıdır ve M.S. 230-270 yıllarına tarihlenmektedir.",
      "Muska, Yeni Ahit ve litürjik bir ilahi olan Trisagion'a atıfta bulunan Hristiyan unsurları içeren Latince bir yazıt içermektedir.",
      "Bu keşif, Hristiyanlığın bölgede erken yayılımını ve etkisini anlamak için önemlidir ve yerel geleneklerle entegrasyonunu vurgulamaktadır."
    ],
    "points": 199,
    "commentCount": 175,
    "retryCount": 0,
    "time": 1734510672
  },
  {
    "id": 42447053,
    "title": "XOR Dokusu (2004)",
    "originLink": "https://lodev.org/cgtutor/xortexture.html",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=42447053",
    "commentBody": "",
    "originSummary": [
      "XOR dokuları, bir pikselin x ve y koordinatlarına XOR işlemi uygulanarak oluşturulur, bu da onları oluşturmayı basit hale getirir ve doku eşleyicilerini test etmek için kullanışlı kılar. XOR dokuları, aşırı kullanımları nedeniyle demolar veya oyunlar için uygun olmasa da, farklı RGB değerleri kullanılarak ayarlanabilir veya çeşitli renk efektleri için HSV'den RGB'ye dönüştürülebilir. Benzer dokular, AND ve OR işlemleri kullanılarak da oluşturulabilir; XOR, bitler farklıysa 1 döndürür, AND her iki bit de 1 ise ve OR herhangi bir bit 1 ise 1 döndürür."
    ],
    "commentSummary": [
      "Kullanıcı, x86 assembly kullanarak bir XOR dokusu oluşturmayı tarif etti ve bu, benzer tekniklere ilgi uyandıran ayırt edici bir görsel etkiyle sonuçlandı.",
      "Metin, 1960'ların PDP-1 bilgisayarından bir görsel efekt olan \"munching squares\"ı referans alarak, bu tür grafiklerin tarihsel bağlamını vurguladı.",
      "Katılımcılar, Lode'un Bilgisayar Grafikleri Eğitimi de dahil olmak üzere kaynakları ve deneyimleri paylaştılar ve yaratıcı projeler için Hamming mesafesi dokuları ve glitch algoritmaları gibi ilgili konuları keşfettiler."
    ],
    "points": 198,
    "commentCount": 46,
    "retryCount": 0,
    "time": 1734482604
  },
  {
    "id": 42446846,
    "title": "Ruby'nin JSON'unu Optimize Etmek, Bölüm 1",
    "originLink": "https://byroot.github.io/ruby/json/2024/12/15/optimizing-ruby-json-part-1.html",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=42446846",
    "commentBody": "",
    "originSummary": [
      "Ruby json gem'inin bakımcısı, performansını artırmaya odaklanarak onu Ruby için en hızlı JSON ayrıştırıcı ve oluşturucu yapmayı hedefliyor.- İyileştirmeler, daha hızlı olmasına rağmen maymun yaması ve kararsızlık sorunları olan oj gibi alternatiflere olan bağımlılığı azaltmayı amaçlıyor.- Optimizasyonlar, gereksiz kontrollerden kaçınmayı, olası koşulları önceliklendirmeyi, kurulum maliyetlerini azaltmayı ve arama tablolarını kullanmayı içeriyor ve bu da hızda %30'a kadar artış sağlıyor."
    ],
    "commentSummary": [
      "Makale, Ruby'nin JSON işleme performansındaki iyileştirmeleri, ayrıştırma sürelerini ve simdjson gibi diğer kütüphanelerle karşılaştırmaları ele alıyor.",
      "Ruby'de JSON'u optimize etmenin zorluklarını vurgular, bunlar arasında arama tablolarının kullanımı, SIMD (Tek Komut, Çoklu Veri) talimatları ve C++ yerine C99 kullanmanın kısıtlamaları yer alır.",
      "Bu tartışma, JSON ve Ruby'deki adlandırma kurallarını da kapsamakta, camelCase ve snake_case dönüşümlerinin nasıl ele alınacağına dair öneriler sunmakta ve bir sonraki makalede daha fazla içgörü sunan bir serinin parçası olmaktadır."
    ],
    "points": 196,
    "commentCount": 42,
    "retryCount": 0,
    "time": 1734480532
  }
]
