[
  {
    "id": 42476828,
    "title": "美國法官裁定以色列的 NSO 集團因透過 WhatsApp 入侵記者而負有責任",
    "originLink": "https://www.reuters.com/technology/cybersecurity/us-judge-finds-israels-nso-group-liable-hacking-whatsapp-lawsuit-2024-12-21/",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=42476828",
    "commentBody": "",
    "originSummary": [],
    "commentSummary": [
      "美國一名法官已經追究以色列 NSO 集團通過 WhatsApp 入侵記者的責任，這引發了對公司在駭客和監控活動中責任的質疑。",
      "此案件突顯了與網路工具銷售和使用相關的倫理問題，將其比作傳統武器銷售，並引發了對管理層可能面臨法律後果的討論。",
      "這也引起了對更廣泛議題的關注，例如隱私、政府監控，以及社群媒體公司在保護用戶資料方面的責任。"
    ],
    "points": 331,
    "commentCount": 63,
    "retryCount": 0,
    "time": 1734745103
  },
  {
    "id": 42476192,
    "title": "「將 C 編譯為安全的 Rust，形式化」",
    "originLink": "https://arxiv.org/abs/2412.15042",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=42476192",
    "commentBody": "",
    "originSummary": [
      "由 Aymeric Fromherz 和 Jonathan Protzenko 撰寫的論文探討了將 C 語言代碼轉換為安全的 Rust，重點在於透過避免使用不安全的 Rust 特性來確保記憶體安全。",
      "作者介紹了一種類型導向的翻譯方法，使用「分割樹」進行指標運算的靜態分析，以及在 Rust 中處理 C 語言結構體類型的策略。",
      "「他們的方法成功地將 HACL* 密碼學庫和 EverParse 的二進位解析器轉譯成一個經過驗證的 80,000 行純 Rust 密碼學庫，並在保持效能的同時，僅進行最少量的策略性複製。」"
    ],
    "commentSummary": [
      "「將 C 語言代碼轉換為安全的 Rust 是困難的，這是由於基本語言差異，特別是 Rust 的所有權模型，這需要為了安全性進行重大重新設計。- 像 C2Rust 這樣的工具可以協助翻譯，但過程很複雜，有些 C 程式由於固有的不安全性，無法在不改變其語義的情況下移植。- 雖然將 C 翻譯成 Rust 可以增強安全性並揭示錯誤，但 Rust 的安全性常被誤解，而 C 代碼的形式驗證(這有助於翻譯)並不總是可用。」"
    ],
    "points": 257,
    "commentCount": 114,
    "retryCount": 0,
    "time": 1734737403
  },
  {
    "id": 42475703,
    "title": "A Raycaster in Bash",
    "originLink": "https://github.com/izabera/pseudo3d",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=42475703",
    "commentBody": "",
    "originSummary": [
      "「一個受遊戲《德軍總部》啟發的光線投射器已在 Bash 中實現，展示了使用 Bash 進行圖形應用程式的挑戰。該專案面臨的限制包括 Bash 的速度緩慢、缺乏浮點數支援以及終端機限制，這使得維護螢幕狀態和優化效能變得困難。儘管使用了 Unicode 半方塊以獲得更好的解析度，該專案仍因高 I/O 需求和低效的顏色更新而掙扎，突顯了使用 Bash 處理此類任務的複雜性。」"
    ],
    "commentSummary": [
      "「在 Bash 中的光線投射器是一個專案，透過每列使用光線追蹤來模擬 3D 效果，能夠以最少的 `echo` 命令高效地渲染場景。」",
      "該專案因使用字串重複來繪製天空、草地和物體的線條而顯著，這使其成為在受限環境中創建體素渲染引擎的激勵範例。",
      "討論中強調了在 MS Batch 和 `awk` 中類似的光線投射專案，展示了在使用非傳統程式語言進行複雜任務時的創造力。"
    ],
    "points": 215,
    "commentCount": 29,
    "retryCount": 0,
    "time": 1734733545
  },
  {
    "id": 42475228,
    "title": "高通在晶片設計授權爭議中勝訴 Arm",
    "originLink": "https://www.bloomberg.com/news/articles/2024-12-20/qualcomm-wins-licensing-fight-with-arm-over-chip-designs",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=42475228",
    "commentBody": "",
    "originSummary": [],
    "commentSummary": [
      "高通在與安謀(Arm)關於晶片設計授權的法律糾紛中獲得勝利，此糾紛特別涉及高通收購Nuvia的相關事宜。",
      "此案件圍繞著高通現有的許可是否涵蓋了Nuvia的設計，Arm主張所有符合Arm標準的CPU都是其指令集架構(ISA)的衍生產品。",
      "陪審團對於 Nuvia 違反許可的猶豫不決有利於高通，這引發了對 Arm 許可實務的擔憂，並可能鼓勵公司考慮 RISC-V 這一開源替代方案。"
    ],
    "points": 196,
    "commentCount": 108,
    "retryCount": 0,
    "time": 1734730133
  },
  {
    "id": 42479233,
    "title": "使用 Python 查詢 Apple 的 FindMy 網路",
    "originLink": "https://github.com/malmeloo/FindMy.py",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=42479233",
    "commentBody": "",
    "originSummary": [
      "FindMy.py 是一個全面的函式庫，旨在查詢 Apple 的 FindMy 網路，目的是整合分散的「Find My 場景」。目前處於 Alpha 階段，這意味著其 API 設計可能會進行更改。",
      "該程式庫支援跨平台功能、位置報告解密、Apple 帳號登入及雙重驗證 (2FA)，提供非同步 (async) 和同步 (sync) API。",
      "可以透過 PyPi 使用指令 `pip install findmy` 進行安裝，並鼓勵貢獻，提供了特定的程式碼格式化指導方針。"
    ],
    "commentSummary": [
      "「Apple 的 FindMy API 的 Python 實作旨在增強跨平台存取，讓目前需要 Mac 才能使用 FindMy 功能的 Linux 和 Android 用戶受益。」",
      "「此工具可能使得追蹤位置和 AirTags 不再依賴於 Apple 的生態系統，儘管有關於 Apple 可能介入以阻止此類專案的擔憂。」",
      "討論強調了蘋果在跨平台支援上的限制，以及在其生態系統之外管理裝置功能(如家長控制)的困難，並提出了像 Blue Bubbles 和 Firewalla 這樣的替代方案建議。"
    ],
    "points": 184,
    "commentCount": 91,
    "retryCount": 0,
    "time": 1734783295
  },
  {
    "id": 42478107,
    "title": "Spotify 醜陋的真相終於揭曉",
    "originLink": "https://www.honest-broker.com/p/the-ugly-truth-about-spotify-is-finally",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=42478107",
    "commentBody": "",
    "originSummary": [
      "獨立記者 Liz Pelly 的調查揭露了 Spotify 使用假藝術家來增加利潤的行為，特別是在爵士和環境音樂等類型中。這種做法被稱為「完美契合內容」計畫，使 Spotify 能夠避免支付給真正音樂家的版稅，引發了對音樂串流透明度和監管的擔憂。儘管存在爭議，Spotify 的盈利能力有所改善，而音樂產業和主流媒體大多忽視了這些問題，讓獨立新聞報導將其公諸於眾。"
    ],
    "commentSummary": [
      "這篇文章提出了對 Spotify 可能偏好低品質、通俗的音樂(可能是 AI 生成的)而非真正藝術家作品以降低成本的擔憂。- 使用者對 Spotify 的音樂推薦表示不滿，引發了對其商業行為倫理及對藝術家影響的討論。- 這場討論強調了藝術家在以串流為主的市場中面臨的挑戰，並建議如獨立電台或其他串流服務等替代方案。"
    ],
    "points": 173,
    "commentCount": 216,
    "retryCount": 0,
    "time": 1734767128
  },
  {
    "id": 42475011,
    "title": "DOS APPEND",
    "originLink": "https://www.os2museum.com/wp/dos-append/",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=42475011",
    "commentBody": "",
    "originSummary": [
      "OS/2 Museum 部落格探討復古 PC 計算，重點在於 OS/2、DOS 及相關主題。- 最近的一篇文章強調了 DOS 的 APPEND 指令，一個終止並駐留(TSR)程式，幫助較舊的 DOS 應用程式在不同目錄間存取檔案，首次引入於 DOS 3.3。- 文章深入探討了 APPEND 的歷史、演變及實作，並討論其在現代計算環境中的重要性。"
    ],
    "commentSummary": [
      "在歷史上，DOS 的 APPEND 指令對於在不更改組譯器的情況下修改組譯器行為具有重要意義，類似於現代的環境變數和 overlayfs 掛載。",
      "像 SUBST 和 JOIN 這樣的 DOS 命令被用於目錄映射和路徑管理，有助於克服路徑長度的限制。",
      "討論包括 DOS 在 DEC 小型電腦上的歷史發展，以及計算機硬體從小型電腦到當前系統的演變。"
    ],
    "points": 112,
    "commentCount": 53,
    "retryCount": 0,
    "time": 1734728699
  }
]
